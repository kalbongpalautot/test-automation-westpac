apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	//maven {
	//	url "http://nexus.ssi.govt.nz/content/repositories/ossjfrog-snapshots/"
	//}
	//maven {
	//	url "http://nexus.ssi.govt.nz/content/groups/public"
	//}
	maven { url "https://jitpack.io" }
	mavenLocal()
	maven {
		url = 'http://oss.jfrog.org/oss-snapshot-local'
	}
	mavenCentral()
}

configurations {
	javaDoclet
}

// A number of libraries we are using include selenium as a dependecy, use this to check
// gradlew dependencyInsight  --dependency org.seleniumhq.selenium:selenium-java --configuration testCompile
// Enable this to confirm:
/*
configurations.all {
	resolutionStrategy {
		// fail eagerly on version conflict (includes transitive dependencies)
		// e.g. multiple different versions of the same dependency (group and name are equal)
		failOnVersionConflict()
    }
}
*/

ext {
	seleniumVersion = '2.53.1'
}

dependencies {
    javaDoclet 'ch.raffael.pegdown-doclet:pegdown-doclet:1.2.1'

    compile files('libs/ojdbc7.jar')
    
    testCompile 'commons-beanutils:commons-beanutils:1.9.2'
    
    // Database
    compile 'org.codejargon:fluentjdbc:1.3.1'
    	
    // Selenium WebDriver -  Ensure also update all drivers in libs folder to same version    
    compile "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    compile "org.seleniumhq.selenium:selenium-chrome-driver:${seleniumVersion}"
    compile "org.seleniumhq.selenium:selenium-ie-driver:${seleniumVersion}"
    
	compile 'org.jsoup:jsoup:1.8.3'
	
    // Html Elements
    compile ('ru.yandex.qatools.htmlelements:htmlelements-java:1.15') {
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-java'
    }

    // Concordion 
    compile 'org.concordion:concordion:2.0.3'
    compile 'org.concordion:concordion-parallel-run-extension:1.1.0'
    compile 'org.concordion:concordion-timestamp-formatter-extension:1.1.2'
    compile 'org.concordion:concordion-run-totals-extension:1.1.0'
    compile 'org.concordion:concordion-logging-tooltip-extension:1.1.2'
    compile 'org.concordion:concordion-embed-extension:1.1.2'
    compile 'org.concordion:concordion-executeonlyif-extension:0.2.1'
    compile 'org.concordion:concordion-logback-extension:2.0.0-SNAPSHOT'
    compile 'org.concordion:concordion-storyboard-extension:2.0.0-SNAPSHOT'

    // JUnit
	testCompile "junit:junit:4.12"
	testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0'
}

checkstyle {
	toolVersion = '6.19'
	ignoreFailures = true
	configFile = new File("checkstyle-cyf-msd-5.xml")
	// Exclude generated source set
	sourceSets = [sourceSets.main, sourceSets.test]
}

findbugs {
	toolVersion = "3.0.1"
	ignoreFailures = true
	excludeFilter = file("$rootProject.projectDir/findbugs-excludefilter.xml")
	// Exclude generated source set
	sourceSets = [sourceSets.main, sourceSets.test]
}

javadoc { 
	outputs.upToDateWhen { false } // ensure the task runs each time, even if no changes to code
	
	options.windowTitle = 'Test Automation Framework'
	options.docTitle = 'Test Automation Framework'
	options.overview = 'src/main/javadoc/overview.md'
	
	// Allows us to use markdown in overview document (and all javadoc comments)
	options.docletpath = configurations.javaDoclet.files.asType(List)
	options.doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
}

task wrapper(type: Wrapper) {
    //gradleVersion = '2.11'
    gradleVersion = '3.5'
    distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-bin.zip"
    
    // To download through proxy, need to update <project root>\gradle\wrapper\gradle-wrapper.properties and change 
    //		distributionUrl property from https... to http...
    
    //TODO how get gradle to download distribution via Nexus without manually adding 
    // Suggestion in here but not sure if feasible: https://discuss.gradle.org/t/host-gradle-wrapper-distributions-on-maven-central/543
    //distributionUrl = "http://nexus.ssi.govt.nz/content/groups/public/org/gradle/gradle/${gradleVersion}/gradle-${gradleVersion}-bin.zip"
}

// sourceSets {
//   test {
//     java { srcDir 'src/generated/java' }
//     resources { srcDir 'src/generated/resources'}
//   }
// }

test {
	// need utf-8 to get text with non-standard chars e.g. apostrophes comparing successfully 
    compileTestJava.options.encoding = "UTF-8"    
    //include '**/Specification.*'
    
    // Pass through all supplied system properties - excluding those containing '.' as some of these system properties introduce JNA incompatibility issues
    System.properties.each { k, v->
    	if (!k.contains(".")) {
		     systemProperty k, v
	     }
	}
	 
    // Logback Configuration
	if (System.getProperty('logback.configurationFile') != null) systemProperty 'logback.configurationFile', System.getProperty('logback.configurationFile')
        
    // Parallel Runner
	if (System.getProperty('concordion.run.threadCount') != null) {
		systemProperty 'concordion.extensions', 'org.concordion.ext.ParallelRunExtension'
		systemProperty 'concordion.run.threadCount', System.getProperty('concordion.run.threadCount')
	}
	
    systemProperty 'concordion.output.dir', "$reporting.baseDir/spec"
    outputs.upToDateWhen { false } // ensure the tests run each time, even if no changes to test code
    testLogging.showStandardStreams = true
	testLogging.showExceptions = true
}